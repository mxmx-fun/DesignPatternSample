// Chain Of Responsibility Pattern (责任链模式)
// 将请求的发送和接收解耦，让多个接收对象都有机会处理这个请求。将这些接收对象串成一条链，并沿着这条链传递这个请求，直到链上的某个接收对象能够处理它为止。

// 举个例子，现在游戏有关卡，玩家需要按顺序通关每一关。
// 玩家通过后解锁下一关，如果通过存储所有关卡，通过查询。这样做的话，如果关卡很多，查询的效率就会很低。
// 通过责任链模式，我们可以将每一关的下一关存储在当前关卡中，这样就可以通过当前关卡直接获取下一关，而不需要查询。（任务系统同理）

//总结:
//优点：提高代码的灵活性，将请求和处理解耦，增强系统的可扩展性。
//缺点：请求会从链头传递到链尾，直到有对象处理它为止，如果链过长，会影响性能。
//个人理解：将有关联的对象串成一条链，将请求从链头传递到链尾，直到有对象处理它为止。  