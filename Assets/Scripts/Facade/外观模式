// Facade Pattern (外观模式)
// 主要为外部提供一个统一的接口，隐藏内部的复杂逻辑，降低外部的耦合度。

// 举个例子，现在有个人想让车往前跑10m
// 而想让车跑起来，需要点火引擎，挂N档，然后踩油门等等。
// 而外观模式，就好像傻瓜操作。忽略掉上述的一系列操作，你只需要知道启动车的接口。调用就可以让车直接跑10m，不用管中间的过程。

//总结:
//优点：外观模式，使客户与子系统之间的耦合度降低，客户端不需要知道子系统的具体实现，只需要知道外观类的接口就可以了。易于分工开发，提高开发效率。
//缺点：不符合开闭原则，因为如果有新的功能，需要修改外观类的代码。并且外观类会造成类爆炸。
//个人理解：Controller层