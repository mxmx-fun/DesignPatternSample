 Bridge Pattern (桥接模式)
 多对多的组合，通过桥接类，动态将他们组合起来，使得类可以独立变化。
 主要思想：将类进行抽象部分和实现部分划分。使得他们可以独立变化。

 举个例子，现在有多个角色类型，有战士，法师，弓箭手等等。角色有各自的特性。
 现在又有多个武器类型，有剑，刀，枪等等。武器也有各自的特性。
 那这时候如果想要多种搭配的角色，就需要创建多个类，比如战士+剑，战士+刀，战士+枪，法师+剑，法师+刀，法师+枪等等。

 实现方法1：
 我们通常会用一个枚举来表示武器，然后角色类有战士类，法师类，弓箭手类等等。
 然后在各个角色类里去判断武器的类型，然后进行对应的逻辑。
 弊端：后续武器增加，所有的角色类都需要修改。很不方便维护。假设别的类也需要角色类型或者武器类型组合，逻辑无法复用。

 实现方法2：
 直接定义一个角色总类，角色类型以及武器类型也全部定义为枚举。然后在这个类里去进行switch/if判断执行对应的逻辑。
 弊端：这样会导致后期再添加新的角色类型以及武器类型，甚至更多组合的属性字段。会造成类爆炸。这个类里会存在非常多的逻辑。不方便维护管理。假设别的类也需要组合，逻辑无法复用。

 桥接模式实现：
 而如果理解了桥接模式，就可以抽象出一个角色总类（RoleEnity），这个抽象类里有两个实现接口类，一个是角色类型的接口类，另外一个是武器类型的接口类。
 两个接口类都有对应固定的实现逻辑，例如战士角色，初始化的时候生命属性增加。刀的武器，暴击率增加。这些都写在实现接口类里。这样后续角色类型，武器增加就不会有所影响。
 弊端：Debug的时候，会存在虚假跳转的问题。不宜与排错。

 总结:
 优点：使得实现与抽象分离，存在更高的灵活性。易于代码阅读。后期易于维护扩展。
 缺点：存在虚假跳转的问题，不容易改错。