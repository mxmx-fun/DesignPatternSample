// Adapter Pattern(适配器模式)
// 适配器模式可以帮助不兼容的接口类，通过适配器类来转换成兼容的接口类。
// 通常应用于想增加功能，但先前有类似的代码，但不能完全复用。

// 举个例子，现在有角色和敌人两个类，他们分别都有各自的行为以及属性计算方式。
// 某天，策划想要增加宠物类，宠物类需要走角色的行为逻辑，但属性计算走敌人的逻辑。
// 不用适配器模式，我们可能就直接创建个新的类，然后把角色逻辑拷贝，和敌人属性计算逻辑拷贝到新的类。
// 这样看似没问题，但某天如果角色行为逻辑和敌人属性计算逻辑变更了。宠物类就也需要相应的去变更。
// 而如果我们使用适配器模式，我们就可以不用关注宠物类的逻辑。

//总结：
//优点：适配器模式使得原本存在的类有了更多的灵活性，可以基于原本的类进行开发。
//缺点：与原本的类耦合。一旦原本的类变更，也会随之变更。
//个人理解：如果想要原本的类能够走兼容模式，可以考虑使用。

