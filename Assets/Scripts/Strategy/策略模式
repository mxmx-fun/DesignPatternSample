// Strategy Pattern(策略模式)
// 策略模式主要是为了解决大量的if else判断，将各个算法的逻辑分离出来，降低耦合度。

// 举个例子，现在角色攻击有多种伤害算法策略，有战士伤害计算逻辑，法师伤害计算逻辑。
// 如果写在同一个类里面，就是if else判断，每个算法的逻辑都在一起，不好维护。
// 策略模式，则是将每个算法的逻辑分离出来，每个算法都是一个类，这样就可以很好的维护了。

//总结：
//优点：策略模式可以避免大量的if和else，并且不会随着策略增加而去修改所有策略所对应的逻辑。可以维护项目。
//缺点：Debug的时候，存在虚假跳转的问题，不利于静态阅读代码。并且后期策略增加会造成类爆炸。

//策略模式与状态模式的区别：
//状态模式是一堆状态间进行切换，状态间的逻辑都会耦合一部分。所以增加策略的时候，需要去修改耦合的策略。
//策略模式是一堆算法间进行切换，算法间的逻辑不会耦合。所以添加策略的时候，并不需要去修改其他策略。
