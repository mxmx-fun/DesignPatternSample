// Builder Pattern (建造者模式)
// 主要将实现与流程进行分离，方便拓展与维护

// 举个例子，现在有个人想在车工厂里造车，但车有不同的配置
// 而造车的流程是一样的，只是配置不同，比如有颜色差异，引擎差异，以及轮胎差异
// 那么我们可以将造车的流程抽象出来，然后将不同的配置独立出来实现

//总结:
//优点：将实现与流程进行分离，方便拓展与维护。流程顺序可以在一处修改即可。
//缺点：每个流程都需要一个类来实现，如果流程很多，那么类也会很多，不利于维护。
//个人理解：通常与工厂模式一起使用，工厂模式负责创建对象，建造者模式负责创建对象的流程。